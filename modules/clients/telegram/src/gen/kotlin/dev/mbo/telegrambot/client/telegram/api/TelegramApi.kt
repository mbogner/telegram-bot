/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.mbo.telegrambot.client.telegram.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import dev.mbo.telegrambot.client.telegram.model.GetMeResponseDto
import dev.mbo.telegrambot.client.telegram.model.GetUpdateResponseDto

import com.fasterxml.jackson.annotation.JsonProperty

import dev.mbo.telegrambot.client.telegram.infrastructure.ApiClient
import dev.mbo.telegrambot.client.telegram.infrastructure.ApiResponse
import dev.mbo.telegrambot.client.telegram.infrastructure.ClientException
import dev.mbo.telegrambot.client.telegram.infrastructure.ClientError
import dev.mbo.telegrambot.client.telegram.infrastructure.ServerException
import dev.mbo.telegrambot.client.telegram.infrastructure.ServerError
import dev.mbo.telegrambot.client.telegram.infrastructure.MultiValueMap
import dev.mbo.telegrambot.client.telegram.infrastructure.PartConfig
import dev.mbo.telegrambot.client.telegram.infrastructure.RequestConfig
import dev.mbo.telegrambot.client.telegram.infrastructure.RequestMethod
import dev.mbo.telegrambot.client.telegram.infrastructure.ResponseType
import dev.mbo.telegrambot.client.telegram.infrastructure.Success
import dev.mbo.telegrambot.client.telegram.infrastructure.toMultiValue

class TelegramApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.telegram.org")
        }
    }

    /**
     * A simple method for testing your bot&#39;s authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.
     * 
     * @param token Auth token in the path.
     * @return GetMeResponseDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMe(token: kotlin.String) : GetMeResponseDto {
        val localVarResponse = getMeWithHttpInfo(token = token)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetMeResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * A simple method for testing your bot&#39;s authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.
     * 
     * @param token Auth token in the path.
     * @return ApiResponse<GetMeResponseDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMeWithHttpInfo(token: kotlin.String) : ApiResponse<GetMeResponseDto?> {
        val localVariableConfig = getMeRequestConfig(token = token)

        return request<Unit, GetMeResponseDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMe
     *
     * @param token Auth token in the path.
     * @return RequestConfig
     */
    fun getMeRequestConfig(token: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/{token}/getMe".replace("{"+"token"+"}", encodeURIComponent(token.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * A simple method for testing your bot&#39;s authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.
     * 
     * @param token Auth token in the path.
     * @param offset Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten. (optional)
     * @param limit Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100. (optional, default to 100)
     * @param timeout Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only. (optional, default to 0)
     * @param allowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used. Please note that this parameter doesn&#39;t affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time. (optional)
     * @return GetUpdateResponseDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUpdates(token: kotlin.String, offset: kotlin.Int? = null, limit: kotlin.Int? = 100, timeout: kotlin.Int? = 0, allowedUpdates: kotlin.collections.List<kotlin.String>? = null) : GetUpdateResponseDto {
        val localVarResponse = getUpdatesWithHttpInfo(token = token, offset = offset, limit = limit, timeout = timeout, allowedUpdates = allowedUpdates)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetUpdateResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * A simple method for testing your bot&#39;s authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.
     * 
     * @param token Auth token in the path.
     * @param offset Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten. (optional)
     * @param limit Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100. (optional, default to 100)
     * @param timeout Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only. (optional, default to 0)
     * @param allowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used. Please note that this parameter doesn&#39;t affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time. (optional)
     * @return ApiResponse<GetUpdateResponseDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUpdatesWithHttpInfo(token: kotlin.String, offset: kotlin.Int?, limit: kotlin.Int?, timeout: kotlin.Int?, allowedUpdates: kotlin.collections.List<kotlin.String>?) : ApiResponse<GetUpdateResponseDto?> {
        val localVariableConfig = getUpdatesRequestConfig(token = token, offset = offset, limit = limit, timeout = timeout, allowedUpdates = allowedUpdates)

        return request<Unit, GetUpdateResponseDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUpdates
     *
     * @param token Auth token in the path.
     * @param offset Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten. (optional)
     * @param limit Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100. (optional, default to 100)
     * @param timeout Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only. (optional, default to 0)
     * @param allowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used. Please note that this parameter doesn&#39;t affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time. (optional)
     * @return RequestConfig
     */
    fun getUpdatesRequestConfig(token: kotlin.String, offset: kotlin.Int?, limit: kotlin.Int?, timeout: kotlin.Int?, allowedUpdates: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (timeout != null) {
                    put("timeout", listOf(timeout.toString()))
                }
                if (allowedUpdates != null) {
                    put("allowed_updates", toMultiValue(allowedUpdates.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/{token}/getUpdates".replace("{"+"token"+"}", encodeURIComponent(token.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
